.)Each service will have there own DB
.) Quiz will have no idea about questions and vice-verse
.) To access the questions from question db in question service . We will need to write endpoints between the two services so that they can communicate  .

.) From where you start your application , select edit configurations , select copy configurations , go on Modify Option , Select Add VM Option, Write command _Dserver.port = 8081 . to create another instances of your application .

.) To Create a Eureka server

1.) Spring Initializer  - Create Project - Dependencies - Spring Web , Eureka Server
2.) In Service Registry - Main Class add @EnableEurekaServer annotation  
3.) In Application Properties  - 
application.name= 
server.port= 
eureka.instance.hostname=localhost
eureka.client.fetch-registry=false
eureka.client.register-with-eureka=false

Next Steps

Registering Question Service 

1.) In Application Properties  - 
application.name= 



Quiz Service 

Create a Feign CLient Interface - Helps connect your two services

0.) Use @EnableFeignClient on the main class of the service  
1.) Create a package and a interface  FeignInterface
2.) Use Annotation @FeignClient("SERVICE-NAME") // Service name should be same as mentioned in application.properties
3.) We need to mention those endpoint that we want to access . We just need to declare them no need to defined them 
4.) Now in your quiz service make a instance of this interface and use it accordingly . Use .getBody() method to extract object from the response entity.
Now we can you use this interface to access the other services 



Api Gateway Creation

1.) Create new Project - Dependency - Gateway , EurekaClient 
2.) In application properties
spring.application.name=
server.port= 

spring.cloud.gateway.discovery.locator.enabled=true 
//This property is very important . This property is basically saying to api-gateway you are free to search 

spring.cloud.gateway.discovery.locator.lower-case-service-id=true










Question 

Made changes in the entity mapping used @ElementCollection Instead of @ManyToMany 


